@page "/"
@using Demo.Models
@using FlintSoft.Controls.Models
@using static FlintSoft.Controls.Buttons.FSButton

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<EditForm Model="_model" OnValidSubmit="myFirstSubmit" class="first-form">
    <DataAnnotationsValidator />

    <FSFormRow>
        <FSInput Id="first-inp" Label="My first Input" @bind-Value="_model.FirstTextInput" ValidationFor="() => _model.FirstTextInput" />
    </FSFormRow>
    <FSFormRow>
        <FSDateInput Id="first-date" Label="My first Date" @bind-DateValue="_model.FirstDate" ValidationFor="() => _model.FirstDate" />
    </FSFormRow>
    <FSFormRow>
        <FSDropdown Id="first-dropdown" 
            TType="DropdownItem"
            Items="SelectableItems" 
            @bind-Item="_model.SelectedItem" 
            EmptyText="Bitte wählen Sie aus..."
            ValidationFor="() => _model.SelectedItem">
            <OptionValueTemplate Context="item">@item.Value</OptionValueTemplate>
        </FSDropdown>
    </FSFormRow>
    <FSFormRow>
        <FSDropdownContainer Label="Matchtyp" Id="matchtype">
            <InputSelect id="matchtype" @bind-Value="_model.MatchType" class="matchtype" >
                @foreach(MatchTypes m in Enum.GetValues(typeof(MatchTypes)))
                {
                    <option value="@m">@(m switch { MatchTypes.MATCH => "Meisterschaftsspiel", MatchTypes.CUP => "Cupspiel", MatchTypes.FRENDLY => "Freundschaftsspiel", _ => "" })</option>
                }
            </InputSelect>
        </FSDropdownContainer>
    </FSFormRow>
    <FSFormRow>
        <FSCheckbox Id="athome" Label="Heimspiel" @bind-CheckBoxValue="_model.IsAtHome" ValidationFor="() => _model.IsAtHome" />
    </FSFormRow>
    <FSFormRow>
        <FSDateTimeInput Id="when" Label="Spieltermin" @bind-DateTimeValue="_model.When" ValidationFor="() => _model.When" />
    </FSFormRow>
    <FSFormRow>
        <FSTypeAhead Id="countries" Label="Land" Suggestions="countries" @bind-Value="_model.Country" ValidationFor="() => _model.Country" />
    </FSFormRow>
    <FSFormRow>
        <FSTypeAhead Id="countries2" Label="Land2" Suggestions="countries" @bind-Value="_model.Country2" ValidationFor="() => _model.Country2" />
    </FSFormRow>
    <FSFormRow>
        <FSTypeAheadDynamic Id="cities" Label="Orte" ProvideSuggestionsRequest="getSuggestions" @bind-Value="_model.City" ValidationFor="() => _model.City" />
    </FSFormRow>
    <FSFormRow>
        Value:
        <p>@(System.Text.Json.JsonSerializer.Serialize(_model))</p>
    </FSFormRow>
    <FSFormButtonRow>
        <FSButton ButtonType="submit" Caption="Speichern" Style="ButtonStyle.PRIMARY" />
        <FSButton ButtonType="button" Caption="Abbrechen" Style="ButtonStyle.SECONDARY" OnClickCallback="abort" />
        <FSButton ButtonType="button" Caption="Set Item" Style="ButtonStyle.SUCCESS" OnClickCallback="setItem" />
        <FSButton ButtonType="button" Caption="Abbrechen" Style="ButtonStyle.DANGER" OnClickCallback="abort" />
    </FSFormButtonRow>
</EditForm>

<textarea>@TextArea</textarea>

@code {
    private List<string> cities = new(); 

    public string TextArea { get; set; } = "";

    public FirstInputs _model = new();

    List<string> countries = new List<string>();

    protected override void OnInitialized()
    {
        string[] countriesLocal = new string[] { "Afghanistan", "Albania", "Algeria", "Andorra", "Angola", "Anguilla", "Antigua &amp; Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bosnia &amp; Herzegovina", "Botswana", "Brazil", "British Virgin Islands", "Brunei", "Bulgaria", "Burkina Faso", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Cayman Islands", "Central Arfrican Republic", "Chad", "Chile", "China", "Colombia", "Congo", "Cook Islands", "Costa Rica", "Cote D Ivoire", "Croatia", "Cuba", "Curacao", "Cyprus", "Czech Republic", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Falkland Islands", "Faroe Islands", "Fiji", "Finland", "France", "French Polynesia", "French West Indies", "Gabon", "Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", "Greece", "Greenland", "Grenada", "Guam", "Guatemala", "Guernsey", "Guinea", "Guinea Bissau", "Guyana", "Haiti", "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Iran", "Iraq", "Ireland", "Isle of Man", "Israel", "Italy", "Jamaica", "Japan", "Jersey", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kosovo", "Kuwait", "Kyrgyzstan", "Laos", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libya", "Liechtenstein", "Lithuania", "Luxembourg", "Macau", "Macedonia", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Mauritania", "Mauritius", "Mexico", "Micronesia", "Moldova", "Monaco", "Mongolia", "Montenegro", "Montserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauro", "Nepal", "Netherlands", "Netherlands Antilles", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "North Korea", "Norway", "Oman", "Pakistan", "Palau", "Palestine", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Poland", "Portugal", "Puerto Rico", "Qatar", "Reunion", "Romania", "Russia", "Rwanda", "Saint Pierre &amp; Miquelon", "Samoa", "San Marino", "Sao Tome and Principe", "Saudi Arabia", "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Korea", "South Sudan", "Spain", "Sri Lanka", "St Kitts &amp; Nevis", "St Lucia", "St Vincent", "Sudan", "Suriname", "Swaziland", "Sweden", "Switzerland", "Syria", "Taiwan", "Tajikistan", "Tanzania", "Thailand", "Timor L'Este", "Togo", "Tonga", "Trinidad &amp; Tobago", "Tunisia", "Turkey", "Turkmenistan", "Turks &amp; Caicos", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States of America", "Uruguay", "Uzbekistan", "Vanuatu", "Vatican City", "Venezuela", "Vietnam", "Virgin Islands (US)", "Yemen", "Zambia", "Zimbabwe" };
        countries = countriesLocal.ToList();

        _model.Country2 = "Andorra";
    }

    void myFirstSubmit()
    {
        TextArea = "";
        TextArea = $"Text: {_model.FirstTextInput}, Date: {_model.FirstDate.Date.ToShortDateString()}";
    }

    void abort() {
        TextArea = "";
    }

    void setItem() {
        _model.SelectedItem = SelectableItems[2];
    }

    private List<DropdownItem> SelectableItems = new List<DropdownItem>(){
        new DropdownItem { Key = "first", Value = "First Entry" },
        new DropdownItem { Key = "second", Value = "Second Entry" },
        new DropdownItem { Key = "third", Value = "Third Entry" },
        new DropdownItem { Key = "fourth", Value = "Fourth Entry" }
    };

    async Task<IEnumerable<string>> getSuggestions(string searchText)
    {
        if (searchText.Length <= 2) return Enumerable.Empty<string>();

        var ret = new List<string>();

        if (cities.Count() == 0)
        {
            var data = await File.ReadAllLinesAsync("cities.csv");

            cities.Clear();
            foreach (var l in data)
            {
                var cols = l.Split(',');
                var city = cols[3].Trim();
                cities.Add(city);
            }
        }

        ret = cities.Where(x => x.ToLower().StartsWith(searchText.ToLower())).ToList();

        return ret;
    }
} 